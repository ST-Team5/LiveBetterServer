// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.livebetter.controllers;

import com.livebetter.controllers.MealsController;
import com.livebetter.domain.Meals;
import com.livebetter.services.MealsService;
import com.livebetter.services.PersonMealsService;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect MealsController_Roo_Controller {
    
    @Autowired
    MealsService MealsController.mealsService;
    
    @Autowired
    PersonMealsService MealsController.personMealsService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String MealsController.create(@Valid Meals meals, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, meals);
            return "mealses/create";
        }
        uiModel.asMap().clear();
        mealsService.saveMeals(meals);
        return "redirect:/mealses/" + encodeUrlPathSegment(meals.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String MealsController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Meals());
        return "mealses/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String MealsController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("meals", mealsService.findMeals(id));
        uiModel.addAttribute("itemId", id);
        return "mealses/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String MealsController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("mealses", Meals.findMealsEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) mealsService.countAllMealses() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("mealses", Meals.findAllMealses(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "mealses/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String MealsController.update(@Valid Meals meals, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, meals);
            return "mealses/update";
        }
        uiModel.asMap().clear();
        mealsService.updateMeals(meals);
        return "redirect:/mealses/" + encodeUrlPathSegment(meals.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String MealsController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, mealsService.findMeals(id));
        return "mealses/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String MealsController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Meals meals = mealsService.findMeals(id);
        mealsService.deleteMeals(meals);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/mealses";
    }
    
    void MealsController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("meals_createddatetime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("meals_modifieddatetime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void MealsController.populateEditForm(Model uiModel, Meals meals) {
        uiModel.addAttribute("meals", meals);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("personmealses", personMealsService.findAllPersonMealses());
    }
    
    String MealsController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
